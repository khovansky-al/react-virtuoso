{"version":3,"sources":["expandable-cards.tsx"],"names":[],"mappings":";;;;;;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;AAEA,IAAM,GAAG,GAAG,SAAN,GAAM,CAAC,KAAD,EAAe;AAAA,MACjB,QADiB,GACmB,KADnB,CACjB,QADiB;AAAA,MACP,QADO,GACmB,KADnB,CACP,QADO;AAAA,MACG,WADH,GACmB,KADnB,CACG,WADH;;AAAA,kBAEL,oBAAS,QAAT,CAFK;AAAA;AAAA,MAElB,EAFkB;AAAA,MAEd,KAFc;;AAGzB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,GAAL,CAAS,QAAT,IAAqB,QAA9B,IAA0C,QAArD,EAA+D,QAA/D,CAAwE,EAAxE,CAAd;AACA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,KAAK,EAAE;AAAZ,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,IAAA,KAAK,EAAE;AACL,MAAA,UAAU,EAAE,MADP;AAEL,MAAA,OAAO,EAAE,UAFJ;AAGL,MAAA,MAAM,EAAE;AAHH,KADT;AAME,IAAA,OAAO,EAAE,mBAAK;AACZ,MAAA,WAAW,CAAC,CAAC,QAAF,CAAX;AACA,MAAA,KAAK,CAAC,CAAC,EAAF,CAAL;AACD;AATH,GAAA,iBAAA,EAWgB,QAXhB,iBAAA,EAWuC,IAAI,CAAC,GAAL,EAXvC,EAYE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,KAAK,EAAE;AAAE,MAAA,MAAM,EAAE,EAAE,GAAG,MAAH,GAAY,QAAQ,GAAG,CAAX,KAAiB,CAAjB,GAAqB,KAArB,GAA6B,MAArD;AAA6D,MAAA,QAAQ,EAAE;AAAvE;AAAZ,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,IAAA,KAAK,EAAE;AACL,MAAA,UAAU,aAAM,KAAN,CADL;AAEL,MAAA,MAAM,EAAE;AAFH;AADT,GAAA,CADF,CAZF,CADF,CADF;AAyBD,CA7BD;;AAiCc,SAAU,GAAV,GAAa;AAAA,mBACO,oBAAoB,EAApB,CADP;AAAA;AAAA,MAClB,QADkB;AAAA,MACR,YADQ;;AAGzB,MAAM,WAAW,GAAG,SAAd,WAAc,CAAC,QAAD;AAAA,WAClB,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AACF,MAAA,QAAQ,EAAE,QADR;AAEF,MAAA,QAAQ,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAD,CAFlB;AAGF,MAAA,WAAW,EAAE,qBAAC,QAAD,EAAsB;AACjC,QAAA,YAAW,CAAC,UAAC,GAAD;AAAA,iBAAS,MAAM,CAAC,MAAP,CAAc,GAAd,sBAAsB,QAAtB,EAAiC,QAAjC,EAAT;AAAA,SAAD,CAAX;AACD;AALC,KAAJ,CADkB;AAAA,GAApB;;AASA,SAAO,KAAA,CAAA,aAAA,CAAC,aAAD,EAAS;AAAC,IAAA,KAAK,EAAE;AAAE,MAAA,MAAM,EAAE;AAAV,KAAR;AAAyB,IAAA,UAAU,EAAE,GAArC;AAA0C,IAAA,WAAW,EAAE,WAAvD;AAAoE,IAAA,uBAAuB,EAAE;AAA7F,GAAT,CAAP;AACD","file":"expandable-cards.5439f51b.js","sourceRoot":"../examples","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport * as React from 'react'\nimport { useState } from 'react'\nimport { Virtuoso } from '../src'\n\nconst Row = (props: any) => {\n  const { rowIndex, expanded, setExpanded } = props\n  const [ex, setEx] = useState(expanded)\n  const color = Math.floor(Math.abs(Math.sin(rowIndex) * 16777215) % 16777215).toString(16)\n  return (\n    <div style={{}}>\n      <div\n        style={{\n          background: 'grey',\n          padding: '40px 0px',\n          border: '4px solid black',\n        }}\n        onClick={() => {\n          setExpanded(!expanded)\n          setEx(!ex)\n        }}\n      >\n        This is row #{rowIndex} rendered at {Date.now()}\n        <div style={{ height: ex ? '100%' : rowIndex % 2 === 0 ? '2px' : '35px', overflow: 'hidden' }}>\n          <div\n            style={{\n              background: `#${color}`,\n              height: '250px',\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\ninterface IExpanded {\n  [key: number]: boolean\n}\nexport default function App() {\n  const [expanded, setExpanded] = useState<IExpanded>({})\n\n  const itemContent = (rowIndex: number) => (\n    <Row\n      rowIndex={rowIndex}\n      expanded={!!expanded[rowIndex]}\n      setExpanded={(expanded: boolean) => {\n        setExpanded((old) => Object.assign(old, { [rowIndex]: expanded }))\n      }}\n    />\n  )\n  return <Virtuoso style={{ height: 900 }} totalCount={500} itemContent={itemContent} initialTopMostItemIndex={100} />\n}\n"]}